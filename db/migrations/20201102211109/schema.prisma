// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = ["sqlite", "postgres"]
    url = "***"
}

generator client {
    provider = "prisma-client-js"
}

// --------------------------------------

model User {
    id             				Int            		@default(autoincrement()) @id
    createdAt      				DateTime       		@default(now())
    updatedAt      				DateTime       		@updatedAt
    name           				String?
    email          				String         		@unique
    hashedPassword 				String?
    role           				String         		@default("user")
    sessions       				Session[]
    Loginrequest   				Loginrequest[]
    Calendar       				Calendar[]
	plan						String?
	active						Boolean				@default(false)
	createdRoles    			Role[] 				@relation("RoleCreatedBy")
	calendarLastUpdates			Calendar[]			@relation("CalendarLastUpdateBy")
	calendarWindowLastUpdates	CalendarWindow[]	@relation("CalendarWindowLastUpdateBy")
}

model Session {
    id                 Int       @default(autoincrement()) @id
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    expiresAt          DateTime?
    handle             String    @unique
    user               User?     @relation(fields: [userId], references: [id])
    userId             Int?
    hashedSessionToken String?
    antiCSRFToken      String?
    publicData         String?
    privateData        String?
}

model Loginrequest {
    id         		Int      	@default(autoincrement()) @id
    createdAt  		DateTime 	@default(now())
    user       		User     	@relation(fields: [userId], references: [id])
    userId     		Int
    loginToken 		String   	@default(uuid()) @unique
}

model Calendar {
    id         		Int      	@default(autoincrement()) @id
    createdAt  		DateTime 	@default(now())
	updatedAt       DateTime	@updatedAt
	lastUpdateBy	User?		@relation("CalendarLastUpdateBy", fields: [lastUpdateById], references: [id])
	lastUpdateById	Int?
    user       		User		@relation(fields: [userId], references: [id])
    userId     		Int
	options			String?
    name	   		String
	calendarWindows	CalendarWindow[]
	shareKeys		ShareKey[]
}

model ShareKey {
	id         		Int      	@default(autoincrement()) @id
    createdAt  		DateTime 	@default(now())
	updatedAt       DateTime	@updatedAt
    user		    User		@relation(fields: [createdBy], references: [id])
    createdBy     	Int
	calendar    	Calendar	@relation(fields: [calendarId], references: [id])
    calendarId  	Int
	key				String		@default(uuid())
}

model CalendarWindow {
 	id          	Int      	@default(autoincrement()) @id
    createdAt   	DateTime	@default(now())
	updatedAt   	DateTime 	@updatedAt
	lastUpdateBy	User?		@relation("CalendarWindowLastUpdateBy", fields: [lastUpdateById], references: [id])
	lastUpdateById	Int?
	calendar    	Calendar	@relation(fields: [calendarId], references: [id])
    calendarId  	Int
	day				Int
	content			String
}

model Payment {
	id          	Int      	@default(autoincrement()) @id
    createdAt   	DateTime	@default(now())
	updatedAt   	DateTime 	@updatedAt
	user       		User    	@relation(fields: [userId], references: [id])
    userId     		Int
	payload			String
	transactionId	String		@default(uuid())
	amount			Int
	plan			String
	completed		Boolean		@default(false)
	provider		String
}

model Image {
	id          	Int      	@default(autoincrement()) @id
    createdAt   	DateTime	@default(now())
	user       		User    	@relation(fields: [userId], references: [id])
    userId     		Int
	asset_id		String
	url				String
}

model Role {
	id          	Int      	@default(autoincrement()) @id
	calendar    	Calendar	@relation(fields: [calendarId], references: [id])
    calendarId  	Int
    createdByUser   User   		@relation("RoleCreatedBy", fields: [createdBy], references: [id])
	createdBy       Int
	user       		User		@relation(fields: [userId], references: [id])
    userId     		Int
	role			String
}

model UserInvite {
	id         		Int      	@default(autoincrement()) @id
	createdAt   	DateTime	@default(now())
	updatedAt   	DateTime 	@updatedAt
	user			User		@relation(fields: [createdBy], references: [id])
    createdBy   	Int
	email			String
	calendar    	Calendar?	@relation(fields: [calendarId], references: [id])
    calendarId  	Int?
	role			String?
}