// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = ["sqlite", "postgres"]
    url = "***"
}

generator client {
    provider = "prisma-client-js"
}

// --------------------------------------

model User {
    id             	Int            @default(autoincrement()) @id
    createdAt      	DateTime       @default(now())
    updatedAt      	DateTime       @updatedAt
    name           	String?
    email          	String         @unique
    hashedPassword 	String?
    role           	String         @default("user")
    sessions       	Session[]
    Loginrequest   	Loginrequest[]
    Calendar       	Calendar[]
	plan			String?
}

model Session {
    id                 Int       @default(autoincrement()) @id
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    expiresAt          DateTime?
    handle             String    @unique
    user               User?     @relation(fields: [userId], references: [id])
    userId             Int?
    hashedSessionToken String?
    antiCSRFToken      String?
    publicData         String?
    privateData        String?
}

model Loginrequest {
    id         Int      @default(autoincrement()) @id
    createdAt  DateTime @default(now())
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    loginToken String   @default(uuid()) @unique
}

model Calendar {
    id         		Int      	@default(autoincrement()) @id
    createdAt  		DateTime 	@default(now())
	updatedAt       DateTime	@updatedAt
    user       		User		@relation(fields: [userId], references: [id])
    userId     		Int
    name	   		String
	calendarWindows	CalendarWindow[]
}

model CalendarWindow {
 	id          Int      	@default(autoincrement()) @id
    createdAt   DateTime	@default(now())
	updatedAt   DateTime 	@updatedAt
	calendar    Calendar	@relation(fields: [calendarId], references: [id])
    calendarId  Int
	day			Int
	content		String
}

model Payment {
	id          	Int      	@default(autoincrement()) @id
    createdAt   	DateTime	@default(now())
	updatedAt   	DateTime 	@updatedAt
	user       		User    	@relation(fields: [userId], references: [id])
    userId     		Int
	payload			String
	transactionId	String		@default(uuid())
	amount			Int
	plan			String
	completed		Boolean		@default(false)
	provider		String
}